#include<algorithm>
#include<iostream>
#include<vector>
using namespace std;

void heapify(int idx,vector<int>&v)
{
    int left=2*idx;
    int right=2*idx+1;
    
    int min_idx=idx;
    int last=v.size()-1;
    if(left<=last and v[left]<v[min_idx])
    min_idx=left;
    
    if(right<=last and v[right]<v[min_idx])
    min_idx=right;
    
    if(min_idx!=idx)
    {
        swap(v[idx],v[min_idx]);
        heapify(min_idx,v);
    }
    
}

void pop(vector<int>&v)
{
    int last=v.size()-1;
    swap(v[1],v[last]);
    v.pop_back();
    heapify(1,v);
}

int top(vector<int>&v)
{
return v[1];
}

void heap(vector<int>&v)
{
    int l,j,p;
    l=v.size();
        j=l-1;
        while(j>1)
        {
            if(j%2==0)
            p=j/2;
            else if((j-1)>0)
            p=(j-1)/2;
            
            if(v[p]>v[j])
            swap(v[p],v[j]);
            
            j=p;
        }
}

int main()
{
    int temp;
    vector<int>v;
    int n;
    cin>>n;
    v.push_back(-1);
    
    for(int i=0;i<n;i++)
    {
        cin>>temp;
        v.push_back(temp);
        heap(v);
    }
    
    for(int i=1;i<v.size();i++)
    cout<<v[i]<<" ";
    cout<<endl;
    
    //Popping elements from heap
    for(int i=0;i<n;i++)
    {
        cout<<top(v)<<" ";
        pop(v);
    }
    
    return 0;
}
